name: Docker Build and Push

# Controls when the workflow will run
on:
  push:
    branches:
      - main # Push images tagged 'latest' and commit SHA on pushes to main
      - develop # Push images tagged 'develop' and commit SHA on pushes to develop
    # Optionally add tags push:
    # tags:
    #   - 'v*.*.*' # Push images tagged with the Git tag version (e.g., v1.0.0)

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest # Use the latest GitHub-hosted Ubuntu runner

    permissions:
      contents: read # Needed to check out the code
      packages: write # Needed to push images potentially to ghcr.io (though we use Docker Hub here)

    steps:
      # 1. Checkout Code: Get the source code including the Dockerfile
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1 # Fetch the latest commit only to reduce time and space

      # 2. Docker Metadata: Extract tags and labels based on Git events
      - name: Docker meta
        id: meta # Assign an ID to refer to the output later
        uses: docker/metadata-action@v5
        with:
          # List of Docker images to use as base name for tags
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.repository_owner == secrets.DOCKERHUB_USERNAME && github.repository || format('{0}/{1}', secrets.DOCKERHUB_USERNAME, github.event.repository.name) }} # Format: your-dockerhub-username/your-repo-name
          tags: |
            # tag specific events
            type=ref,event=branch # git branch name (e.g., develop)
            type=ref,event=tag   # git tag name (e.g., v1.2.3)
            type=sha             # git commit sha (long format)
            # Add 'latest' tag only for the main branch
            type=raw,value=latest,enable={{is_default_branch}}

      # 3. Set up Docker Buildx: Enable enhanced build capabilities
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 4. Login to Docker Hub: Use secrets for credentials
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }} # Use the access token here

      # 5. Build and Push Docker Image: Build using Dockerfile and push to registry
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: . # Build context is the root directory
          file: ./Dockerfile # Path to the Dockerfile
          push: ${{ github.event_name != 'pull_request' }} # Only push on push events, not PRs (redundant with 'on' trigger but safe)
          tags: ${{ steps.meta.outputs.tags }} # Use tags generated by metadata action
          labels: ${{ steps.meta.outputs.labels }} # Use labels generated by metadata action
          # Enable Docker layer caching using GitHub Actions cache
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Optional: Add vulnerability scanning step here after push if desired
      # - name: Scan image for vulnerabilities
      #   uses: aquasecurity/trivy-action@master # Example using Trivy
      #   with:
      #     image-ref: ${{ steps.meta.outputs.tags }} # Use appropriate tag, maybe the SHA specific one
      #     format: 'table'
      #     exit-code: '1' # Fail workflow if vulnerabilities are found (adjust severity threshold)
      #     ignore-unfixed: true
      #     vuln-type: 'os,library'
      #     severity: 'CRITICAL,HIGH'